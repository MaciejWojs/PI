name: Create documentation
on:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'

env:
  NEWEST_TAG: ${{ github.ref_name }}
  REPO: ${{ github.repository }}
  REPO_NAME: ${{ github.event.repository.name }}
  FILE_NAME: main
  IS_TAG: ${{ startsWith(github.ref, 'refs/tags/') }}
  LATEX_DIR: ./docs/latex/
  HTML_DIR: ./docs/html
  PYTHON_VERSION: 3.13
  UML_FILE: uml.puml
  UML_WITHOUT_EXT: uml
  HEADER_FILE: ${{ github.event.repository.name }}.hpp
  JAVA_VERSION: 23

jobs:
  Create_documentation:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Set up Git repository
        uses: actions/checkout@v4

      - name: Set up JDK and Python
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'zulu'
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: setup UV
        id: setup-uv
        uses: astral-sh/setup-uv@v5.1.0
        with:
          enable-cache: true
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: doxygen-install
        uses: ssciwr/doxygen-install@v1.6.0

      - name: Configure Parallel APT
        run: |
          sudo bash -c 'cat > /etc/apt/apt.conf.d/99parallel << EOF
          Acquire::Queue-Mode "host";
          Acquire::http::Pipeline-Depth 200;
          Acquire::Languages "none";
          Acquire::Retries 3;
          Acquire::http::Timeout 30;
          Acquire::https::Timeout 30;
          EOF'

      - name: Check for cached packages
        uses: awalsh128/cache-apt-pkgs-action@latest
        id: cache-packages
        with:
          packages:  make texlive-binaries texlive-font-utils texlive-base texlive-latex-extra texlive-lang-polish ghostscript graphviz inkscape
          version: 1.0
          execute_install_scripts: true

      - name: Update TeX Live
        if: steps.cache-packages.outputs.cache-hit == 'true'
        run: sudo apt install --reinstall -y texlive-binaries texlive-font-utils texlive-base texlive-latex-extra texlive-lang-polish -o Dpkg::Options::="--force-confnew" -o Acquire::Retries=3 -o Acquire::http::Timeout=30 -o Acquire::https::Timeout=30
      
      - name: Install required packages
        if: steps.cache-packages.outputs.cache-hit != 'true'
        run: sudo apt update && sudo apt install -y make texlive-binaries texlive-font-utils texlive-base texlive-latex-extra texlive-lang-polish ghostscript graphviz inkscape
      
      - name: Install dependencies
        run: |
          uv venv
          uv pip install hpp2plantuml
          uv run hpp2plantuml -i *.hpp -o ${{ env.UML_FILE }}
          uv run ./convert.py ${{ env.UML_FILE }} ${{ env.HEADER_FILE }}

      - name: Configure PlantUML
        run: |
          latest_version=$(curl -s https://api.github.com/repos/plantuml/plantuml/releases/latest | jq -r '.tag_name')
          wget -q -O plantuml.jar https://github.com/plantuml/plantuml/releases/download/${latest_version}/plantuml-${latest_version#"v"}.jar
          echo "skinparam backgroundColor transparent" > config.txt

      - name: Generate UML assets
        run: |
          for theme in white dark; do
            [ $theme == "dark" ] && echo "skinparam monochrome reverse" >> config.txt
            for ext in svg png; do
              java -jar plantuml.jar -t$ext -config config.txt ${{ env.UML_FILE }}
              mv ${{ env.UML_WITHOUT_EXT }}.$ext ${{ env.UML_WITHOUT_EXT }}-$theme.$ext
            done
          done

      - name: Configure Doxygen
        run: |
          wget -q -O doxygen-awesome.css https://raw.githubusercontent.com/jothepro/doxygen-awesome-css/main/doxygen-awesome.css
          wget -q -O doxygen-awesome-sidebar-only.css https://raw.githubusercontent.com/jothepro/doxygen-awesome-css/main/doxygen-awesome-sidebar-only.css
          cat >> Doxyfile << EOL
          PLANTUML_JAR_PATH      = plantuml.jar
          PLANTUML_CFG_FILE      = config.txt
          GENERATE_TREEVIEW      = YES
          DISABLE_INDEX          = NO
          FULL_SIDEBAR           = NO
          HTML_EXTRA_STYLESHEET  = doxygen-awesome.css doxygen-awesome-sidebar-only.css
          EOL
          if [ "${{ env.IS_TAG }}" = "true" ]; then
            echo PROJECT_NUMBER = ${NEWEST_TAG} >> Doxyfile
          else
            latest_tag=$(curl -s https://api.github.com/repos/${{ env.REPO }}/releases/latest | jq -r '.tag_name')
            echo PROJECT_NUMBER = ${latest_tag} >> Doxyfile
          fi
          echo PROJECT_NAME = "${{ env.REPO_NAME }}" >> Doxyfile
          echo PROJECT_BRIEF = "Implementacja ${{ env.REPO_NAME }}" >> Doxyfile

      - name: Generate Doxygen Documentation
        run: |
          doxygen Doxyfile
          sudo mv ${{ env.LATEX_DIR }} ./docs/latex-pl
          # Change Doxyfile language to English
          sed -i 's/OUTPUT_LANGUAGE        = Polish/OUTPUT_LANGUAGE        = English/' Doxyfile
          doxygen Doxyfile

      - name: Deploy HTML Documentation
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ${{ env.HTML_DIR }}

      - name: Compile English PDF
        working-directory: ${{ env.LATEX_DIR }}
        run: |
          make -B
          cp refman.pdf ${{github.workspace}}/en-${{ env.FILE_NAME }}.pdf

   
      - name: Compile Polish PDF
        working-directory: ./docs/latex-pl
        run: |
          make -B
          cp refman.pdf ${{github.workspace}}/pl-${{ env.FILE_NAME }}.pdf

      - name: Release PDFs and UML
        if: ${{ env.IS_TAG == 'true' }}
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          artifacts: |
            *-${{ env.FILE_NAME }}.pdf
            ${{ env.UML_WITHOUT_EXT }}-*
